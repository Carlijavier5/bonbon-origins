using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace ModelAssetDatabase {

    /// <summary>
    /// A class to load and control the Ext Data generated by the Asset Library;
    /// </summary>
    public static class ExtManager {

        /// <summary> Internal reference to the data path, to avoid having to get it so often; </summary>
        private static string dap;
        /// <summary> Path to the folder where external model data will be stored; </summary>
        public static string DataAssetPath {
            get {
                if (dap == null) {
                    var assetGUID = AssetDatabase.FindAssets($"t:Script {nameof(ExtData)}");
                    dap = AssetDatabase.GUIDToAssetPath(assetGUID[0]).RemovePathEnd("\\/");
                } return dap;
            }
        }

        private readonly static int extVersion = 1; 

        private static Dictionary<string, ExtData> extDataDict;

        public static void Refresh() {
            extDataDict = new Dictionary<string, ExtData>();
            string[] extPaths = ModelAssetDatabase.FindAssets(DataAssetPath, new string[] { "ASSET" });
            foreach (string path in extPaths) {
                var extData = AssetDatabase.LoadAssetAtPath<ExtData>(path);
                if (extData == null) continue;
                if (string.IsNullOrEmpty(AssetDatabase.GUIDToAssetPath(extData.guid))) MarkExtData(extData);
                else extDataDict[extData.guid] = extData;
            }
        }
    
        /// <summary>
        /// Generates a blank Ext Data file for the given model;
        /// </summary>
        /// <param name="modelID"></param>
        /// <returns> A new ExtData asset, or a pre-existent data asset if one exists; </returns>
        public static ExtData CreateExtData(string modelID) {
            if (extDataDict.ContainsKey(modelID)) return extDataDict[modelID];
            var newExtData = ScriptableObject.CreateInstance<ExtData>();
            newExtData.version = extVersion;
            newExtData.guid = modelID;
            newExtData.isModel = AssetDatabase.LoadAssetAtPath<Mesh>(AssetDatabase.GUIDToAssetPath(modelID)) != null;
            AssetDatabase.CreateAsset(newExtData, DataAssetPath + "/" + modelID + ".asset");
            return newExtData;
        }

        /// <summary>
        /// Returns the ExtData associated with a given model ID;
        /// For use in an edge case where no asset should be created if one doesn't exist;
        /// </summary>
        /// <param name="modelID"> ID of the model to check; </param>
        /// <returns> A pre-existent data asset, if it exists; </returns>
        public static ExtData FetchExtData(string modelID) {
            if (extDataDict.ContainsKey(modelID)) return extDataDict[modelID];
            else return null;
        }

        /// <summary>
        /// Deletes the ExtData file associated with a given modelID;
        /// </summary>
        /// <param name="modelID"> ID of the model whose ExtData should be deleted; </param>
        public static void DeleteExtData(string modelID) {
            if (!extDataDict.ContainsKey(modelID)) return;
            string extDataPath = AssetDatabase.GetAssetPath(extDataDict[modelID]);
            if (!string.IsNullOrEmpty(extDataPath)) AssetDatabase.MoveAssetToTrash(extDataPath);
            extDataDict.Remove(modelID);
        }

        public static void MarkExtData(ExtData extData) {

        }
    }
}